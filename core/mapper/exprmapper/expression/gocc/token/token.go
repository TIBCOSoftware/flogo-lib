// Code generated by gocc; DO NOT EDIT.

package token

import (
	"fmt"
)

type Token struct {
	Type
	Lit []byte
	Pos
}

type Type int

const (
	INVALID Type = iota
	EOF
)

type Pos struct {
	Offset int
	Line   int
	Column int
}

func (p Pos) String() string {
	return fmt.Sprintf("Pos(offset=%d, line=%d, column=%d)", p.Offset, p.Line, p.Column)
}

type TokenMap struct {
	typeMap []string
	idMap   map[string]Type
}

func (m TokenMap) Id(tok Type) string {
	if int(tok) < len(m.typeMap) {
		return m.typeMap[tok]
	}
	return "unknown"
}

func (m TokenMap) Type(tok string) Type {
	if typ, exist := m.idMap[tok]; exist {
		return typ
	}
	return INVALID
}

func (m TokenMap) TokenString(tok *Token) string {
	//TODO: refactor to print pos & token string properly
	return fmt.Sprintf("%s(%d,%s)", m.Id(tok.Type), tok.Type, tok.Lit)
}

func (m TokenMap) StringType(typ Type) string {
	return fmt.Sprintf("%s(%d)", m.Id(typ), typ)
}

var TokMap = TokenMap{
	typeMap: []string{
		"INVALID",
		"$",
		"||",
		"&&",
		"(",
		")",
		"==",
		"!=",
		"<",
		"<=",
		">",
		">=",
		"+",
		"-",
		"*",
		"/",
		"%",
		"function_name",
		"()",
		",",
		"?",
		":",
		"if",
		"{",
		"}",
		"else",
		"doublequotes_string",
		"singlequote_string",
		"number",
		"argument",
		"true",
		"false",
		"float",
		"nil",
		"null",
	},

	idMap: map[string]Type{
<<<<<<< HEAD
		"INVALID":             0,
		"$":                   1,
		"function_name":       2,
		"(":                   3,
		")":                   4,
		"()":                  5,
		",":                   6,
		"operator_charactor":  7,
		"?":                   8,
		":":                   9,
		"if":                  10,
		"{":                   11,
		"}":                   12,
		"else":                13,
		"doublequotes_string": 14,
		"singlequote_string":  15,
		"number":              16,
		"argument":            17,
		"true":                18,
		"false":               19,
		"float":               20,
		"nil":                 21,
		"null":                22,
=======
		"INVALID":       0,
		"$":             1,
		"||":            2,
		"&&":            3,
		"(":             4,
		")":             5,
		"==":            6,
		"!=":            7,
		"<":             8,
		"<=":            9,
		">":             10,
		">=":            11,
		"+":             12,
		"-":             13,
		"*":             14,
		"/":             15,
		"%":             16,
		"function_name": 17,
		"()":            18,
		",":             19,
		"?":             20,
		":":             21,
		"doublequotes_string": 22,
		"singlequote_string":  23,
		"number":              24,
		"argument":            25,
		"true":                26,
		"false":               27,
		"float":               28,
		"nil":                 29,
		"null":                30,
>>>>>>> master
	},
}
