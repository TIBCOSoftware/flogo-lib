// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/TIBCOSoftware/flogo-lib/core/mapper/exprmapper/expression/gocc/token"
)

const (
	NoState    = -1
	NumStates  = 88
	NumSymbols = 90
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '"'
1: '"'
2: '''
3: '''
4: '$'
5: '|'
6: '|'
7: '&'
8: '&'
9: '('
10: ')'
11: '='
12: '='
13: '!'
14: '='
15: '<'
16: '<'
17: '='
18: '>'
19: '>'
20: '='
21: '+'
22: '-'
23: '*'
24: '/'
25: '%'
26: '('
27: ')'
28: ','
29: '?'
30: ':'
31: 'i'
32: 'f'
33: '{'
34: '}'
35: 'e'
36: 'l'
37: 's'
38: 'e'
39: 't'
40: 'r'
41: 'u'
42: 'e'
43: 'f'
44: 'a'
45: 'l'
46: 's'
47: 'e'
48: 'n'
49: 'i'
50: 'l'
51: 'n'
52: 'u'
53: 'l'
54: 'l'
55: '-'
56: 'e'
57: 'E'
58: '+'
59: '-'
60: '.'
61: '.'
62: '.'
63: '.'
64: '_'
65: '-'
66: '['
67: ']'
68: '.'
69: '-'
70: '['
71: ']'
72: '_'
73: ' '
74: '$'
75: '{'
76: '}'
77: '\'
78: ' '
79: '\t'
80: '\n'
81: '\r'
82: '0'-'9'
83: 'a'-'z'
84: 'A'-'Z'
85: '0'-'9'
86: 'a'-'z'
87: 'A'-'Z'
88: '0'-'9'
89: .
*/
